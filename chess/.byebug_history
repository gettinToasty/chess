exit
n
@board
s
c
@board
s
@board
c
finish
fin
c
n
board[updated_pos].is_a?(NullPiece)
board[updated_pos]
display updated_pos
c
fin
c
el
el.is_a?(Array)
clone_piece(el)
dup(el)
display el
s
c
fin
new_g.class
new_g
exit
c
fin
c
x_test
y_test
board[8][0]
board[updated_pos]
board[updated_pos].is_a?(NullPiece)
c
display current_pos
possibles
n
pos
s
board[updated_pos].is_a?(NullPiece)
c
n
possibles
n
display updated_pos
display current_pos
display piece
c
n
s
n
s
n
s
n
display piece
c
n
s
n
s
n
c
n
display piece
exit
n
s
n
s
n
display piece
n
display current_pos
s
n
current_pos
s
n
c
op_king
q!
display op_king
c
n
board[updated_pos].color != board[current_pos].color
display possibles
display updated_pos
c
n
board[current_pos].color
board[updated_pos].color
board[updated_pos].color == board[current_pos].color
display updated_pos
display possibles
c
current_pos
board[current_pos]
board[updated_pos]
board[current_pos].color == board[updated_pos].color
n
display updated_pos
n
display possibles
c
r
run
c
n
x_test && y_test
n
display possibles
display updated_pos
c
@current_pos
c
b
a
y
x
display @current_pos
display diff
